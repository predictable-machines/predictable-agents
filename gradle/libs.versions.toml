[versions]
agp = "8.11.1"
android-compileSdk = "36"
android-minSdk = "24"
android-targetSdk = "35"
androidx-activityCompose = "1.10.1"
androidx-appcompat = "1.7.1"
androidx-constraintlayout = "2.2.1"
androidx-core-ktx = "1.17.0"
androidx-espresso-core = "3.7.0"
androidx-lifecycle = "2.9.2"
androidx-material = "1.12.0"
androidx-test-junit = "1.3.0"
arrow = "2.1.2"
compose-multiplatform = "1.8.2"
dokka = "2.0.0"
exposedCore = "0.61.0"
hikaricp = "7.0.1"
java = "17"
junit = "4.13.2"
kmplog = "0.6.2"
kotlin = "2.2.10"
kotlin-envvar = "1.0.6"
kotlin-logging = "7.0.12"
kotlin-serialization = "1.9.0"
kotlin-mcp = "0.6.0"
kotlinx-coroutines = "1.10.2"
kotter = "1.2.1"
ktor = "3.2.3"
logback = "1.5.18"
openai-client = "4.0.1"
postgresql = "42.7.7"
testcontainers = "1.21.3"
tree-printer = "3.2.1"
xemantic-ai-tool-schema = "1.1.2"
google-cloud-storage = "2.55.0"
google-cloud-run = "0.72.0"
opennlp = "2.5.5"
ksmt = "0.5.30"

[libraries]
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "androidx-constraintlayout" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "androidx-espresso-core" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-material = { group = "com.google.android.material", name = "material", version.ref = "androidx-material" }
androidx-test-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-junit" }
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-core-serialization = { module = "io.arrow-kt:arrow-core-serialization", version.ref = "arrow" }
arrow-fx-coroutines = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposedCore" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposedCore" }
exposed-java-time = { module = "org.jetbrains.exposed:exposed-java-time", version.ref = "exposedCore" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposedCore" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
kmplog = { module = "io.github.kdroidfilter:kmplog", version.ref = "kmplog" }
kotlin-envvar = { module = "dev.scottpierce:kotlin-env-var", version.ref = "kotlin-envvar" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-mcp-sdk = { module = "io.modelcontextprotocol:kotlin-sdk", version.ref = "kotlin-mcp" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlin-serialization" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-swing = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotter = { module = "com.varabyte.kotter:kotter-jvm", version.ref = "kotter" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-sse = { module = "io.ktor:ktor-server-sse", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests-jvm", version.ref = "ktor" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
openai-client = { module = "com.aallam.openai:openai-client", version.ref = "openai-client" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
testcontainers = { group = "org.testcontainers", name = "testcontainers", version.ref = "testcontainers" }
tree-printer = { module = "hu.webarticum:tree-printer", version.ref = "tree-printer" }
xemantic-ai-tool-schema = { module = "com.xemantic.ai:xemantic-ai-tool-schema", version.ref = "xemantic-ai-tool-schema" }
google-cloud-run = { module = "com.google.cloud:google-cloud-run", version.ref = "google-cloud-run" }
google-cloud-storage = { module = "com.google.cloud:google-cloud-storage", version.ref = "google-cloud-storage" }
opennlp-tools = { module = "org.apache.opennlp:opennlp-tools", version.ref = "opennlp" }
ksmt-core = { module = "io.ksmt:ksmt-core", version.ref = "ksmt" }
ksmt-z3 = { module = "io.ksmt:ksmt-z3", version.ref = "ksmt" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
compose = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
mavenPublish = { id = "com.vanniktech.maven.publish", version = "0.34.0" }
openApi = { id = "io.github.nomisrev.openapi-kt-plugin", version = "0.0.8"}

# Convention plugins
conventions = { id = "conventions" }
